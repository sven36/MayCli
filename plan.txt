

    模拟数据是本地起json-server
    测试环境，预上线环境，正式环境
    路由管理
    
    
    未匹配的资源都放到static文件夹下 release: '/${static}/${namespace}$0'
    项目中所有的js和css文件都添加hash码
    项目中所有的es6文件都需要进行非限制模式es5转换
    项目中所有的html文件和tpl文件都当做smarty模板进行解析
    pkg目录下是一些合并的通用js,css文件等

    大体量：多功能、多页面、多状态、多系统；
    大规模：多人甚至多团队合作开发；
    高性能：CDN部署、缓存控制、文件指纹、缓存复用、
            请求合并、按需加载、同步/异步加载、移动端首屏CSS内嵌、HTTP 2.0服务端资源推送。

    静态资源管理系统 = 资源表 + 资源加载框架
    开发规范
    模块化开发
    组件化开发
    组件仓库
    性能优化
    项目部署
    开发流程
    开发工具：这里说的工具不是指IDE，而是工程工具，包括构建与优化工具、开发-调试-部署等流程工具，
                以及组件库获取、提交等相关工具，甚至运营、文档、配置发布等平台工具。
                前端开发需要工具支持，这个问题的根本原因来自前端领域语言特性
                前端开发所使用的语言（js、css、html）以及前端工程资源的加载与定位策略决定了前端工程必须要工具支持。
                由于这些工具通常都是独立的系统，要想把它们串联起来，才有了yeoman这样的封装。
                前面提到的7项技术元素都直接或间接的对前端开发工具设计产生一定的影响，因此能否串联其他技术要素，
                使得前端开发形成一个连贯可持续优化的开发体系，工具的设计至关重要。

    代码转换：TypeScript 编译成 JavaScript、SCSS 编译成 CSS 等。
    文件优化：压缩 JavaScript、CSS、HTML 代码，压缩合并图片等。
    代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。
    模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。
    自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。
    代码校验：在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。
    自动发布：更新完代码后，自动构建出线上发布代码并传输给发布系统。

	https://github.com/joeyguo/blog/issues/9
    http://webpack.wuhaolin.cn/2%E9%85%8D%E7%BD%AE/2-1Entry.html